{
    "project": {
        "name": "Pocketknife UI",
        "description": "Pocketknife UI Documentation",
        "version": "0.0.1",
        "url": "https://github.com/sw4/pocketknife"
    },
    "files": {
        "src/accordian/accordian.js": {
            "name": "src/accordian/accordian.js",
            "modules": {},
            "classes": {
                "pk.accordian": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/carousel/carousel.js": {
            "name": "src/carousel/carousel.js",
            "modules": {},
            "classes": {
                "pk.carousel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/checkbox/checkbox.js": {
            "name": "src/checkbox/checkbox.js",
            "modules": {},
            "classes": {
                "pk.checkbox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/colorpicker/colorpicker.js": {
            "name": "src/colorpicker/colorpicker.js",
            "modules": {},
            "classes": {
                "pk.colorpicker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/core.js": {
            "name": "src/core/core.js",
            "modules": {
                "pocketknife": 1
            },
            "classes": {
                "pk": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/drag/drag.js": {
            "name": "src/drag/drag.js",
            "modules": {},
            "classes": {
                "pk.drag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/modal/modal.js": {
            "name": "src/modal/modal.js",
            "modules": {},
            "classes": {
                "pk.modal": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/notify/notify.js": {
            "name": "src/notify/notify.js",
            "modules": {},
            "classes": {
                "pk.notify": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/rating/rating.js": {
            "name": "src/rating/rating.js",
            "modules": {},
            "classes": {
                "pk.rating": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/scroll/scroll.js": {
            "name": "src/scroll/scroll.js",
            "modules": {},
            "classes": {
                "pk.scroll": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/select/select.js": {
            "name": "src/select/select.js",
            "modules": {},
            "classes": {
                "pk.select": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/slider/slider.js": {
            "name": "src/slider/slider.js",
            "modules": {},
            "classes": {
                "pk.slider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/toggle/toggle.js": {
            "name": "src/toggle/toggle.js",
            "modules": {},
            "classes": {
                "pk.toggle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/color.js": {
            "name": "src/utils/color.js",
            "modules": {},
            "classes": {
                "pk.color": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "pocketknife": {
            "name": "pocketknife",
            "submodules": {},
            "classes": {
                "pk.accordian": 1,
                "pk.carousel": 1,
                "pk.checkbox": 1,
                "pk.colorpicker": 1,
                "pk": 1,
                "pk.drag": 1,
                "pk.modal": 1,
                "pk.notify": 1,
                "pk.rating": 1,
                "pk.scroll": 1,
                "pk.select": 1,
                "pk.slider": 1,
                "pk.toggle": 1,
                "pk.color": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/utils/color.js",
            "line": 2
        }
    },
    "classes": {
        "pk.accordian": {
            "name": "pk.accordian",
            "shortname": "pk.accordian",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "file": "src/accordian/accordian.js",
            "line": 2,
            "description": "Create a new accordian component",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to component",
                            "type": "Object"
                        },
                        {
                            "name": "animate",
                            "description": "Animate expand/collapse actions",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "multiple",
                            "description": "Allow multiple sections to be expanded simultaneously",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.carousel": {
            "name": "pk.carousel",
            "shortname": "pk.carousel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "file": "src/carousel/carousel.js",
            "line": 2,
            "description": "Create a new carousel component",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to component",
                            "type": "Object"
                        },
                        {
                            "name": "value",
                            "description": "Starting item index",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "tabindex",
                            "description": "Tabindex of component, defaults to the attribute value set on the passed element, or `0`",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "delay",
                            "description": "Delay in `ms` between item changes",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4000"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.checkbox": {
            "name": "pk.checkbox",
            "shortname": "pk.checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "file": "src/checkbox/checkbox.js",
            "line": 3,
            "description": "Create a new checkbox control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to control",
                            "type": "Object"
                        },
                        {
                            "name": "value",
                            "description": "Value of initially selected option, defaults to the attribute value set on the passed element, or `0`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "name",
                            "description": "Name of underlying input control, defaults to the attribute value set on the passed element, or `pk-checkbox-RandInt`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "pk-checkbox-RandInt"
                        },
                        {
                            "name": "label",
                            "description": "String to use for the control label, defaults to the attribute value set on the passed element, or its `innerHTML`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "label"
                        },
                        {
                            "name": "tabindex",
                            "description": "Tabindex of control, defaults to the attribute value set on the passed element, or `0`",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "disabled",
                            "description": "Disabled state of control, defaults to the attribute value set on the passed element, or `false`",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "listeners",
                            "description": "Object array of event listeners to bind to underlying input(s)",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.colorpicker": {
            "name": "pk.colorpicker",
            "shortname": "pk.colorpicker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "file": "src/colorpicker/colorpicker.js",
            "line": 2,
            "description": "Create a new colorpicker control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to control",
                            "type": "Object"
                        },
                        {
                            "name": "value",
                            "description": "HEX string of initially selected color, defaults black `#000000`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "#000000"
                        },
                        {
                            "name": "listeners",
                            "description": "Object array of event listeners to bind (nb. only detects `change` event)",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk": {
            "name": "pk",
            "shortname": "pk",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/core/core.js",
            "line": 47,
            "static": 1
        },
        "pk.drag": {
            "name": "pk.drag",
            "shortname": "pk.drag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/drag/drag.js",
            "line": 2,
            "description": "Utility class for creating draggable elements",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to attach drag handlers to",
                            "type": "Object"
                        },
                        {
                            "name": "handle",
                            "description": "DOM element (child of `element`) to use as drag handle",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "element"
                        },
                        {
                            "name": "move",
                            "description": "Show movement during drag, either `true`, `false` or an object consisting of `x` and `y` {Boolean} values",
                            "type": "Object"
                        },
                        {
                            "name": "container",
                            "description": "Object containing details about container",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "element=document.body",
                                    "description": "DOM element used as container, defaults to `document.body`",
                                    "type": "Object"
                                },
                                {
                                    "name": "style=restrict",
                                    "description": "Type of containment, either `restrict`, `snap` or {Object} consisting of `x` and `y` values calculated relative to `container.element`",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "listeners",
                            "description": "Object array of event listeners to bind to underlying element(s) - consisting of `dragstart`, `dragend` and `dragging`",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.modal": {
            "name": "pk.modal",
            "shortname": "pk.modal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/modal/modal.js",
            "line": 3,
            "description": "Create a new modal component",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to component",
                            "type": "Object"
                        },
                        {
                            "name": "header",
                            "description": "Modal header content (`HTML` allowed)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "content",
                            "description": "Modal body content (`HTML` allowed)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "draggable",
                            "description": "Whether to allow modal dragging",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.notify": {
            "name": "pk.notify",
            "shortname": "pk.notify",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/notify/notify.js",
            "line": 2,
            "description": "Class used for notification management",
            "is_constructor": 1
        },
        "pk.rating": {
            "name": "pk.rating",
            "shortname": "pk.rating",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/rating/rating.js",
            "line": 2,
            "description": "Create a new rating control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to control",
                            "type": "Object"
                        },
                        {
                            "name": "value",
                            "description": "Value of initially selected option, defaults to the attribute value set on the passed element, or `0`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "name",
                            "description": "Name of underlying input control, defaults to the attribute value set on the passed element, or `pk-toggle-RandInt`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "pk-toggle-RandInt"
                        },
                        {
                            "name": "tabindex",
                            "description": "Tabindex of control, defaults to the attribute value set on the passed element, or `0`",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "disabled",
                            "description": "Disabled state of control, defaults to the attribute value set on the passed element, or `false`",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "listeners",
                            "description": "Object array of event listeners to bind to underlying input(s)",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.scroll": {
            "name": "pk.scroll",
            "shortname": "pk.scroll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/scroll/scroll.js",
            "line": 2,
            "description": "Attach custom scrollbars to an element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to attach drag handlers to",
                            "type": "Object"
                        },
                        {
                            "name": "axis",
                            "description": "Object consisting of `x` and `y` {Boolean} values denoting scrollable axis, DOM element to attach drag handlers to. Defaults to element attribute `pk-scroll` or `y`",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "y"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.select": {
            "name": "pk.select",
            "shortname": "pk.select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/select/select.js",
            "line": 2,
            "description": "Create a new select control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to control",
                            "type": "Object"
                        },
                        {
                            "name": "options",
                            "description": "Object array of control options",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "value",
                                    "description": "Option value",
                                    "type": "String"
                                },
                                {
                                    "name": "name",
                                    "description": "Option name (displayed label)",
                                    "type": "String"
                                },
                                {
                                    "name": "selected",
                                    "description": "Option selected state",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "Value of initially selected option, defaults to the attribute value set on the passed element, or `0`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "name",
                            "description": "Name of underlying input control, defaults to the attribute value set on the passed element, or `pk-select-RandInt`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "pk-select-RandInt"
                        },
                        {
                            "name": "placeholder",
                            "description": "Placeholder when no options selected, defaults to the attribute value set on the passed element, or `Please select...`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "string"
                        },
                        {
                            "name": "multiple",
                            "description": "Whether to allow multiple options to be selected, defaults to the attribute value set on the passed element, or `false`",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "dropdown",
                            "description": "Display options in dropdown list",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "tabindex",
                            "description": "Tabindex of control, defaults to the attribute value set on the passed element, or `0`",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "disabled",
                            "description": "Disabled state of control, defaults to the attribute value set on the passed element, or `false`",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.slider": {
            "name": "pk.slider",
            "shortname": "pk.slider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/slider/slider.js",
            "line": 2,
            "description": "Create a new slider control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to control",
                            "type": "Object"
                        },
                        {
                            "name": "value",
                            "description": "Initial value, defaults to the attribute value set on the passed element, or `0`",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "min",
                            "description": "Minimum value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "max",
                            "description": "Maximum value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "name",
                            "description": "Name of underlying input control, defaults to the attribute value set on the passed element, or `pk-slider-RandInt`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "pk-slider-RandInt"
                        },
                        {
                            "name": "tabindex",
                            "description": "Tabindex of control, defaults to the attribute value set on the passed element, or `0`",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "disabled",
                            "description": "Disabled state of control, defaults to the attribute value set on the passed element, or `false`",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "listeners",
                            "description": "Object array of event listeners to bind to underlying input(s)",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.toggle": {
            "name": "pk.toggle",
            "shortname": "pk.toggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/toggle/toggle.js",
            "line": 2,
            "description": "Create a new toggle control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "DOM element to convert to control",
                            "type": "Object"
                        },
                        {
                            "name": "options",
                            "description": "Object array of control options",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "value",
                                    "description": "Option value",
                                    "type": "String"
                                },
                                {
                                    "name": "name",
                                    "description": "Option name (displayed label)",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "Value of initially selected option, defaults to the attribute value set on the passed element, or `0`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "name",
                            "description": "Name of underlying input control, defaults to the attribute value set on the passed element, or `pk-toggle-RandInt`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "pk-toggle-RandInt"
                        },
                        {
                            "name": "tabindex",
                            "description": "Tabindex of control, defaults to the attribute value set on the passed element, or `0`",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "disabled",
                            "description": "Disabled state of control, defaults to the attribute value set on the passed element, or `false`",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "listeners",
                            "description": "Object array of event listeners to bind to underlying input(s)",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Consisting of original DOM element (item `0`) and class methods (see below)",
                "type": "Object"
            },
            "chainable": 1
        },
        "pk.color": {
            "name": "pk.color",
            "shortname": "pk.color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pocketknife",
            "namespace": "",
            "file": "src/utils/color.js",
            "line": 2,
            "description": "Utility class for converting color types and generating color schemes. \n\n<div class='info-well'>\nFor color conversion methods, where the expected parameter is an array e.g `[0,0,0]`, the method can also be passed a comma separated value string, e.g. `'0,0,0'`, from which an array will automatically be extrapolated.\n</div>"
        }
    },
    "classitems": [
        {
            "file": "src/carousel/carousel.js",
            "line": 87,
            "description": "Gets or sets control item",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": "Item index to set",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns current item index",
                "type": "Number"
            },
            "class": "pk.carousel"
        },
        {
            "file": "src/checkbox/checkbox.js",
            "line": 36,
            "description": "Gets or sets control value",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": "Value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns current value",
                "type": "String"
            },
            "class": "pk.checkbox"
        },
        {
            "file": "src/checkbox/checkbox.js",
            "line": 43,
            "description": "Gets or sets control disabled state",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "boolean",
                    "description": "Disabled state",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns disabled state",
                "type": "Boolean"
            },
            "class": "pk.checkbox"
        },
        {
            "file": "src/colorpicker/colorpicker.js",
            "line": 201,
            "description": "Fired on selected color changing (click, drag)",
            "itemtype": "event",
            "name": "change",
            "params": [
                {
                    "name": "oldColor",
                    "description": "HEX color string of previous color",
                    "type": "String"
                },
                {
                    "name": "newColor",
                    "description": "HEX color string of new color",
                    "type": "String"
                }
            ],
            "class": "pk.colorpicker"
        },
        {
            "file": "src/colorpicker/colorpicker.js",
            "line": 208,
            "description": "Gets or sets control value (HEX color string, e.g. `#000000`)",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": "Value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns current value",
                "type": "String"
            },
            "class": "pk.colorpicker"
        },
        {
            "file": "src/core/core.js",
            "line": 52,
            "description": "For the passed event object prevent bubbling up the DOM tree",
            "itemtype": "method",
            "name": "preventBubble",
            "params": [
                {
                    "name": "event",
                    "description": "Event Object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns `false`",
                "type": "Boolean"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 71,
            "description": "For the passed element, toggle presence of CSS class",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "class",
                    "description": "CSS class",
                    "type": "String"
                },
                {
                    "name": "toggle",
                    "description": "Optional. `true` to add class if not present, `false` to remove. If ommitted, method will detect and apply/remove as necessary.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "`true` if class added, `false` if removed.",
                "type": "Boolean"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 93,
            "description": "For the passed element, detect presence of CSS class",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "class",
                    "description": "CSS class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`true` if class found, `false` if not.",
                "type": "Boolean"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 105,
            "description": "For the passed element, center horizontally and vertically within the parentNode",
            "itemtype": "method",
            "name": "center",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns passed DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 116,
            "description": "For the passed element, get the passed style property value",
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "Style property to fetch",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns style property value",
                "type": "String"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 129,
            "description": "For the passed element, add CSS class",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "class",
                    "description": "CSS class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns passed DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 145,
            "description": "For the passed element, remove CSS class",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "class",
                    "description": "CSS class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns passed DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 165,
            "description": "Bind an element handler to a DOM node",
            "itemtype": "method",
            "name": "bindEvent",
            "params": [
                {
                    "name": "event",
                    "description": "Event type to bind",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "function",
                    "description": "Event handler to bind, function is passed originating event when called",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns passed DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 185,
            "description": "Unbind an element handler from a DOM node",
            "itemtype": "method",
            "name": "unbindEvent",
            "params": [
                {
                    "name": "event",
                    "description": "Event type to bind",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "function",
                    "description": "Event handler to unbind",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns passed DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 203,
            "description": "Fetch layout and positioning properties of passed DOM element",
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                },
                {
                    "name": "offset",
                    "description": "Calculate values relative to parent or viewport `<html />`",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns object consisting of `top`, `right`, `bottom`, `left`, `height` and `width` values",
                "type": "Object"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 224,
            "description": "Apply a series of event listeners to a DOM element",
            "itemtype": "method",
            "name": "bindListeners",
            "params": [
                {
                    "name": "listeners",
                    "description": "Consisting of event objects to pass to `bindEvent` method",
                    "type": "Object"
                },
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns passed DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 240,
            "description": "Generate a random number between the passed `min` and `max` values",
            "itemtype": "method",
            "name": "getRand",
            "params": [
                {
                    "name": "min",
                    "description": "Minimum value of calculated number",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "Maximum value of calculated number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns pseudo-random number between §min§ and §max§",
                "type": "Number"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 250,
            "description": "Extract unit type from passed string",
            "itemtype": "method",
            "name": "getUnits",
            "params": [
                {
                    "name": "String",
                    "description": "Alphanumeric string (e.g. style property value)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns unit type",
                "type": "String"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 259,
            "description": "Wrap the passed DOM element in a new DOM node created from the `wrapper` string",
            "itemtype": "method",
            "name": "wrapEl",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element to wrap",
                    "type": "Object"
                },
                {
                    "name": "wrapper",
                    "description": "HTML string representing the new DOM wrapper",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns newly created DOM wrapper element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 273,
            "description": "Create a new DOM element from the passed `HTML` string",
            "itemtype": "method",
            "name": "createEl",
            "params": [
                {
                    "name": "HTML",
                    "description": "HTML string representing the new DOM element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns newly created DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 285,
            "description": "Get the index of the passed DOM node within the immediate parent",
            "itemtype": "method",
            "name": "getIndex",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element to return index for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns index of passed element",
                "type": "Number"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 302,
            "description": "Replace the passed DOM element with a new element created from the passed string, inclusive of all original attributes",
            "itemtype": "method",
            "name": "replaceEl",
            "params": [
                {
                    "name": "element",
                    "description": "The DOM eleemnt to replace",
                    "type": "Object"
                },
                {
                    "name": "HTML",
                    "description": "HTML string representing the new DOM element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns newly created DOM element",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 321,
            "description": "Forces the passed variable into an array, xploding comma seperated strings, keeping existing arrys, collapsing objects and or converting strings as necessary",
            "itemtype": "method",
            "name": "toArr",
            "params": [
                {
                    "name": "variable",
                    "description": "Variable to force into array",
                    "type": "Undefined"
                }
            ],
            "return": {
                "description": "Returns array of passed variable",
                "type": "Array"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 340,
            "description": "Collides two arrays, either replacing one with the other, removing one from another, adding one to another or toggling the values of one in another",
            "itemtype": "method",
            "name": "collide",
            "params": [
                {
                    "name": "array1",
                    "description": "Base array",
                    "type": "Array"
                },
                {
                    "name": "array2",
                    "description": "Collider array",
                    "type": "Array"
                },
                {
                    "name": "type",
                    "description": "Type of collision, `0` default, replace `array1` with `array2`, `1` add `array2` to `array1`, `2` remove `array2` from `array1`, `3` toggle `array2` values in `array1` (intelligent add/replace)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Returns resulting `array`",
                "type": "Array"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 372,
            "description": "Gets of sets attribute values, either explicely or impliitely declared",
            "itemtype": "method",
            "name": "attribute",
            "params": [
                {
                    "name": "element",
                    "description": "Related DOM element",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "Attribute name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Optional to get, or value of type specific to attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `element`",
                "type": "Object"
            },
            "chainable": 1,
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/core/core.js",
            "line": 398,
            "description": "Gets browser agnostic offset coordinates for applicable mouse events",
            "itemtype": "method",
            "name": "getEventOffset",
            "params": [
                {
                    "name": "event",
                    "description": "Event to normalize",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns object comprising of normalized `x` and `y` offsets",
                "type": "Object"
            },
            "class": "pk",
            "module": "pocketknife"
        },
        {
            "file": "src/drag/drag.js",
            "line": 60,
            "description": "Fired on drag event starting",
            "itemtype": "event",
            "name": "dragstart",
            "params": [
                {
                    "name": "element",
                    "description": "Element event fired on",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "class": "pk.drag",
            "module": "pocketknife"
        },
        {
            "file": "src/drag/drag.js",
            "line": 67,
            "description": "Fired on during drag event",
            "itemtype": "event",
            "name": "dragging",
            "params": [
                {
                    "name": "element",
                    "description": "Element event fired on",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "class": "pk.drag",
            "module": "pocketknife"
        },
        {
            "file": "src/drag/drag.js",
            "line": 74,
            "description": "Fired on drag event ending",
            "itemtype": "event",
            "name": "dragend",
            "params": [
                {
                    "name": "element",
                    "description": "Element event fired on",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "class": "pk.drag",
            "module": "pocketknife"
        },
        {
            "file": "src/modal/modal.js",
            "line": 84,
            "description": "Closes modal and removes from DOM",
            "itemtype": "method",
            "name": "close",
            "class": "pk.modal",
            "module": "pocketknife"
        },
        {
            "file": "src/notify/notify.js",
            "line": 8,
            "description": "Create a new notification",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "content",
                            "description": "Notification content (`HTML` allowed)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "delay",
                            "description": "Time in `ms` for notificaiton to display for",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "8000"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Object  Returns notification element (item `0`)",
                "type": "Object"
            },
            "class": "pk.notify",
            "module": "pocketknife"
        },
        {
            "file": "src/notify/notify.js",
            "line": 17,
            "description": "Remove a notification",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "element",
                    "description": "Notification element to remove",
                    "type": "Object"
                }
            ],
            "class": "pk.notify",
            "module": "pocketknife"
        },
        {
            "file": "src/rating/rating.js",
            "line": 73,
            "description": "Gets or sets control value",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": "Value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns current value",
                "type": "String"
            },
            "class": "pk.rating",
            "module": "pocketknife"
        },
        {
            "file": "src/rating/rating.js",
            "line": 80,
            "description": "Gets or sets control disabled state",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "boolean",
                    "description": "Disabled state",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns disabled state",
                "type": "Boolean"
            },
            "class": "pk.rating",
            "module": "pocketknife"
        },
        {
            "file": "src/slider/slider.js",
            "line": 50,
            "description": "Fired on slide event starting",
            "itemtype": "event",
            "name": "slidestart",
            "params": [
                {
                    "name": "element",
                    "description": "Element event fired on",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "class": "pk.slider",
            "module": "pocketknife"
        },
        {
            "file": "src/slider/slider.js",
            "line": 57,
            "description": "Fired on during slide event",
            "itemtype": "event",
            "name": "sliding",
            "params": [
                {
                    "name": "element",
                    "description": "Element event fired on",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "class": "pk.slider",
            "module": "pocketknife"
        },
        {
            "file": "src/slider/slider.js",
            "line": 64,
            "description": "Fired on slide event ending",
            "itemtype": "event",
            "name": "slideend",
            "params": [
                {
                    "name": "element",
                    "description": "Element event fired on",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "class": "pk.slider",
            "module": "pocketknife"
        },
        {
            "file": "src/slider/slider.js",
            "line": 128,
            "description": "Gets or sets control value",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": "Value to set",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns current value",
                "type": "Number"
            },
            "class": "pk.slider",
            "module": "pocketknife"
        },
        {
            "file": "src/slider/slider.js",
            "line": 135,
            "description": "Gets or sets control disabled state",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "boolean",
                    "description": "Disabled state",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns disabled state",
                "type": "Boolean"
            },
            "class": "pk.slider",
            "module": "pocketknife"
        },
        {
            "file": "src/toggle/toggle.js",
            "line": 52,
            "description": "Gets or sets control value",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": "Value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns current value",
                "type": "String"
            },
            "class": "pk.toggle",
            "module": "pocketknife"
        },
        {
            "file": "src/toggle/toggle.js",
            "line": 59,
            "description": "Gets or sets control disabled state",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "boolean",
                    "description": "Disabled state",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns disabled state",
                "type": "Boolean"
            },
            "class": "pk.toggle",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 15,
            "description": "Convert a HEX color string to an RGB\n\n    var color=pk.color.hex2rgb('#FF0000');\n    // color = [255,0,0]",
            "itemtype": "method",
            "name": "hex2rgb",
            "params": [
                {
                    "name": "hex",
                    "description": "HEX color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns array of red, blue and green components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 37,
            "description": "Convert an RGB array to a HEX color string\n\n    var color=pk.color.rgb2hex([255,0,0]);\n    // color = '#FF0000'",
            "itemtype": "method",
            "name": "rgb2hex",
            "params": [
                {
                    "name": "rgb",
                    "description": "Array of red, blue and green components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns HEX color string",
                "type": "String"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 59,
            "description": "Convert an RGB array to a HSV array\n\n    var color=pk.color.rgb2hsv([255,0,0]);\n    // color = [0,100,100]",
            "itemtype": "method",
            "name": "rgb2hsv",
            "params": [
                {
                    "name": "rgb",
                    "description": "Array of red, blue and green components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns array of hue, saturation and value components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 106,
            "description": "Convert an HSV array to a RGB array\n\n    var color=pk.color.hsv2rgb([0,100,100]);\n    // color = [255,0,0]",
            "itemtype": "method",
            "name": "hsv2rgb",
            "params": [
                {
                    "name": "hsv",
                    "description": "Array of hue, saturation and value components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns array of red, blue and green components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 175,
            "description": "Convert an RGB array to a HSL array\n\n    var color=pk.color.rgb2hsl([255,0,0]);\n    // color = [0,100,50]",
            "itemtype": "method",
            "name": "rgb2hsl",
            "params": [
                {
                    "name": "RGB",
                    "description": "Array of red, green and blue components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns array of hue, saturation and lightness components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 216,
            "description": "Convert an HSL array to a RGB array\n\n    var color=pk.color.hsl2rgb([0,100,50]);\n    // color = [255,0,0]",
            "itemtype": "method",
            "name": "hsl2rgb",
            "params": [
                {
                    "name": "HSL",
                    "description": "Array of hue, saturation and lightness components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns array of red, green and blue components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 264,
            "description": "Convert a HEX color string to a HSL array\n\n    var color=pk.color.hex2hsl('#FF0000');\n    // color = [0,100,50]",
            "itemtype": "method",
            "name": "hex2hsl",
            "params": [
                {
                    "name": "hex",
                    "description": "HEX color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns array of hue, saturation and lightness components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 277,
            "description": "Convert an HSL array to a HEX color string\n\n    var color=pk.color.hsl2hex([0,100,50]);\n    // color = '#FF0000'",
            "itemtype": "method",
            "name": "hsl2hex",
            "params": [
                {
                    "name": "hsl",
                    "description": "Array of hue, saturation and lightness components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns HEX color string",
                "type": "String"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 291,
            "description": "Convert an HSV array to HSL array\n\n    var color=pk.color.hsv2hsl([0,100,100]);\n    // color = [0,100,50]",
            "itemtype": "method",
            "name": "hsv2hsl",
            "params": [
                {
                    "name": "hsv",
                    "description": "Array of hue, saturation and value components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns array of hue, saturation and lightness components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 305,
            "description": "Convert an HSL array to HSV array\n\n    var color=pk.color.hsl2hsv([0,100,50]);\n    // color = [0,100,100]",
            "itemtype": "method",
            "name": "hsl2hsv",
            "params": [
                {
                    "name": "hsl",
                    "description": "Array of hue, saturation and lightness components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns array of hue, saturation and value components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 319,
            "description": "Convert a HEX color string to a HSV array\n\n    var color=pk.color.hex2hsv('#FF0000');\n    // color = [0,100,100]",
            "itemtype": "method",
            "name": "hex2hsv",
            "params": [
                {
                    "name": "hex",
                    "description": "HEX color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns array of hue, saturation and value components",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 332,
            "description": "Convert an HSV array to a HEX color string\n\n    var color=pk.color.hsv2hex([0,100,100]);\n    // color = '#FF0000'",
            "itemtype": "method",
            "name": "hsv2hex",
            "params": [
                {
                    "name": "hsv",
                    "description": "Array of hue, saturation and value components",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns HEX color string",
                "type": "String"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 345,
            "description": "Generate a series of randomized HEX color strings\n\n    var color=pk.color.rgb2hex([0,100,100]);\n    // color = [255,0,0]",
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "count",
                    "description": "Number of random colors to generate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns Array of HEX color strings",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 364,
            "description": "Generate (palette of) complementary color(s) from passed HEX color string",
            "itemtype": "method",
            "name": "complement",
            "params": [
                {
                    "name": "hex",
                    "description": "HEX color string",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Type of complementary palette to create, either `split` or `double`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns array of HEX color strings",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 394,
            "description": "Generate triadic color palette",
            "itemtype": "method",
            "name": "triadic",
            "params": [
                {
                    "name": "hex",
                    "description": "HEX color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns array of HEX color strings",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 403,
            "description": "Generate tetradic color palette",
            "itemtype": "method",
            "name": "tetradic",
            "params": [
                {
                    "name": "hex",
                    "description": "HEX color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns array of HEX color strings",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 415,
            "description": "Generate pentadic color palette",
            "itemtype": "method",
            "name": "pentadic",
            "params": [
                {
                    "name": "hex",
                    "description": "HEX color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns array of HEX color strings",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        },
        {
            "file": "src/utils/color.js",
            "line": 436,
            "description": "Generate algorithmic color palette",
            "itemtype": "method",
            "name": "algorithmic",
            "params": [
                {
                    "name": "options",
                    "description": "Algorithmic color transformation options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "hex",
                            "description": "HEX color string",
                            "type": "String"
                        },
                        {
                            "name": "count",
                            "description": "Number of colors to produce",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3"
                        },
                        {
                            "name": "type",
                            "description": "Component to calculate on, either `hue`, `saturation` or `value`",
                            "type": "String",
                            "optional": true,
                            "optdefault": "hue"
                        },
                        {
                            "name": "scope",
                            "description": "Number of degrees of rotation to consider",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "360"
                        },
                        {
                            "name": "rotation",
                            "description": "Number of degrees of rotation to calculate from",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns array of HEX color strings",
                "type": "Array"
            },
            "class": "pk.color",
            "module": "pocketknife"
        }
    ],
    "warnings": []
}